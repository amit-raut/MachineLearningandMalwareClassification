#!/usr/bin/env python

__author__ = 'AR'

import os, hashlib, json, sys, time, subprocess as sp
from collections import Counter
from datetime  import datetime as dt


nGram = 5

# Usage Message
if len(os.sys.argv) < 5:
    print "Usage: ./classifier -i [path to malware sample] -t [path to training set directory]"
    os.sys.exit()

for i in xrange(len(sys.argv)):
    if sys.argv[i] == '-i':
        inSample = sys.argv[i + 1]  # Path to folder containing strace files
    if sys.argv[i] == '-t':
        trainingSetPath = sys.argv[i + 1]

# Returns all system calls from strace output file
def getUniqSysCalls(straceFile):
    with open(straceFile) as file:
        syscalls = [ln.split('(', 1)[0] for ln in file if (ln.find('(') != -1)]
        return syscalls

########## Execute the command as child process ##########
def executeChildProcess(command):
    modifiedCommand = 'strace ' + command
    with open(destPath + str(command)[len(sourcePath) + 2: len(sourcePath) + 6] + '.trace', 'a') as f:
        ps = subprocess.Popen(modifiedCommand, stderr=f, stdout=subprocess.PIPE, shell=True)

        time.sleep(1)
	ps.terminate()

# Returns list of overlapping n-gram features
def returnNGramFeature(sysCallsList, nGram):
    returningSet = []
    for index in range(0, len(sysCallsList) - nGram, 3):
    	if sysCallsList[index: index + nGram] not in returningSet:
	        returningSet.append(sysCallsList[index: index + nGram])
    return returningSet


def main():
	global inSample, trainingSetPath

	# Generate strace file for given input sample
	cmd = 'strace ' + str(inSample)
	with open('/tmp/' + os.path.splitext(os.path.basename(str(inSample)))[0] + '.trace', 'w') as traceFile:
		ps = sp.Popen(cmd, stderr=traceFile, stdout=sp.PIPE, shell=True)

        time.sleep(1)
	ps.terminate()

	featureLists = [] # [[3gramList],[4gramList], [5gramList], ...]
	for i in xrange(3, 8):
		featureLists.append(returnNGramFeature(getUniqSysCalls('/tmp/' + \
			os.path.splitext(os.path.basename(str(inSample)))[0] + '.trace'), i))

	print len(featureLists[2])
	trainingSetFileList = [filename for filename in os.listdir(trainingSetPath) if filename.endswith('.json') and 'Hash' in filename]

	print trainingSetFileList
	for filename in sorted(trainingSetFileList):
		with open(os.path.join(trainingSetPath, filename)) as data:
			dictionaryy = json.load(data)
			if filename[0] == '3':
				featureHashList3gram = dictionaryy['featureHashList']
			elif filename[0] == '4':
				featureHashList4gram = dictionaryy['featureHashList']
			elif filename[0] == '5':
				featureHashList5gram = dictionaryy['featureHashList']
			elif filename[0] == '6':
				featureHashList6gram = dictionaryy['featureHashList']
			elif filename[0] == '7':
				featureHashList7gram = dictionaryy['featureHashList']

	# listname = str(os.path.splitext(os.path.basename(str(os.path.join(trainingSetPath, filename))))[0])
			
		
	print featureHashList3gram[0], featureHashList4gram[0], featureHashList7gram[0], featureHashList5gram[0], featureHashList6gram[0]

if __name__ == '__main__':
    start = dt.now()
    print '\n{:*^90}'.format(" Machine Learning and Malware Classification ")
    main()
    end = dt.now() 
    print '{:*^90}\n'.format(' EOP Program took ' + str(end - start)[:10] + ' to complete ')